% \iffalse meta-comment
%
% Copyright 2016
% The LaTeX3 Project and any individual authors listed elsewhere
% in this file.
%
% It may be distributed and/or modified under the conditions of
% the LaTeX Project Public License (LPPL), either version 1.3c of
% this license or (at your option) any later version.  The latest
% version of this license is in the file:
%
%   http://www.latex-project.org/lppl.txt
%
%
%<*driver>
\ProvidesFile{umath2e.dtx}[2016/02/13 v1.0 Unicode mathematics support]
\documentclass{ltxdoc}
\GetFileInfo{umath2e.dtx}
\begin{document}
\title{\filename\\(Unicode mathematics support)}
\author{Will Robertson}
\date{\filedate}
\maketitle
\setcounter{tocdepth}{2}
\tableofcontents
\DocInput{\filename}
\end{document}
%</driver>
% \fi
%
%
% \section{Overview}
%
% 
%
% \StopEventually{}
%
% \section{Implementation}
%
% \subsection{\TeX}
% 
%    \begin{macrocode}
%<*tex>
%    \end{macrocode}
%
%    \begin{macrocode}
\ProvidesPackage{umath2e}

% font loading commands

\ifdefined\directlua

\RequirePackage{luaotfload}

\directlua{
require('font-callback-mapping.lua')
}

\newcommand\umath@fonthook[1]{%
  \edef\@tmpa{#1}\def\@tmpb{}%
  \ifx\@tmpa\@tmpb\else
    \directlua{mathmapstr = '#1'}%
  \fi}

\def\extract@font{%
  \get@external@font
  \csname \curr@fontshape+preloadhook\endcsname
  \global\expandafter\font\font@name\external@font\relax
  \font@name \relax
  \csname \f@encoding+\f@family \endcsname
  \csname \curr@fontshape       \endcsname
  \umath@fonthook{nil}
  \relax
}

\fi

\RequirePackage[TU]{fontenc}

\begingroup
  \normalsize
  \calculate@math@sizes
  \csname S@\f@size\endcsname
  \xdef\umath@sf{\strip@pt\dimexpr0.5\dimexpr\ssf@size pt+\sf@size pt\relax\relax}
  \xdef\umath@tf{\strip@pt\dimexpr0.5\dimexpr \sf@size pt+\tf@size pt\relax\relax}
\endgroup

\newcommand\mathencodingdefault{TU}
\newcommand\mathseriesdefault{m}
\newcommand\mathshapedefault{m}

\newcount\umath@scalecount
\umath@scalecount=0\relax

\newcommand\DeclareMathFamily[3]{%
  \def\umath@fontname{#1}%
  \def\@tmpa{#3}\def\@tmpb{}%
  \ifx\@tmpa\@tmpb
    \def\umath@family{#2}%
  \else
    \def\umath@family{#2-map-#3}%
  \fi
  \edef\umathfontdecl{[\umath@fontname]}%
  \edef\umath@mode;{\ifdefined\directlua mode=base;\fi}%
  \edef\umath@mapping;{\ifdefined\directlua\else mapping=mapping_math_#3\fi}%
  \DeclareFontFamily{\mathencodingdefault}{\umath@family}{}%
  \edef\umath@tmpa{\noexpand\DeclareFontShape
    {\mathencodingdefault}
    {\umath@family}
    {\mathseriesdefault}
    {\mathshapedefault}
    {<-\umath@sf>%
     s*[1.\umath@paddednum{\umath@scalecount+0}]%
     "\umathfontdecl:\umath@mode;script=math;+ssty=1;\umath@mapping;"%
     <\umath@sf-\umath@tf>%
     s*[1.\umath@paddednum{\umath@scalecount+1}]%
     "\umathfontdecl:\umath@mode;script=math;+ssty=0;\umath@mapping;"%
     <\umath@tf->%
     s*[1.\umath@paddednum{\umath@scalecount+2}]%
     "\umathfontdecl:\umath@mode;script=math;\umath@mapping;"}
    {}}\umath@tmpa
  \umath@scalecount=\numexpr\umath@scalecount+3\relax
  \ifdefined\directlua
    \expandafter\gdef\csname
        \mathencodingdefault/\umath@family/\mathseriesdefault/\mathshapedefault+preloadhook%
      \endcsname{\umath@fonthook{#3}}
  \fi
}

\def\umath@paddednum#1{%
  \ifnum\numexpr#1\relax<10 000\number\numexpr#1\relax\else
  \ifnum\numexpr#1\relax<100 00\number\numexpr#1\relax\else
  \ifnum\numexpr#1\relax<1000 0\number\numexpr#1\relax\fi\fi\fi
}

\def\DeclUSymbolFont#1#2#3#4{%
  \def\@tmpa{#4}\def\@tmpb{}%
  \ifx\@tmpa\@tmpb
    \def\umath@family{#3}%
  \else
    \def\umath@family{#3-map-#4}%
  \fi
  \ifcsname \mathencodingdefault+\umath@family\endcsname\else
    \DeclareMathFamily{#1}{#3}{#4}%
  \fi
  \DeclareSymbolFont
    {#2}
    {\mathencodingdefault}
    {\umath@family}
    {\mathseriesdefault}
    {\mathshapedefault}%
}
\def\DeclUMathAlph#1#2#3#4{%
  \def\@tmpa{#4}\def\@tmpb{}%
  \ifx\@tmpa\@tmpb
    \def\umath@family{#3}%
  \else
    \def\umath@family{#3-map-#4}%
  \fi
  \ifcsname \mathencodingdefault+\umath@family\endcsname\else
    \DeclareMathFamily{#1}{#3}{#4}%
  \fi
  \DeclareMathAlphabet
    {#2}
    {\mathencodingdefault}
    {\umath@family}
    {\mathseriesdefault}
    {\mathshapedefault}%
}


% need to fix all the NFSS math assignments

\def\Uset@mathchar#1#2#3#4{%
  \global\Umathcode`#2="\mathchar@type#3 #1 #4\relax}

\def\Uset@mathsymbol#1#2#3#4{%
  \global\Umathchardef#2 "\mathchar@type#3 #1 #4\relax}

\def\Uset@mathdelimiter#1#2#3#4{%
  \xdef#2{\Udelimiter "\mathchar@type#3 #1 #4\relax}%
}
\def\Uset@@mathdelimiter#1#2#3{%
  \global\Udelcode`#2=#1 #3\relax}


\def\uDeclareMathSymbol#1#2#3#4{%
  \expandafter\in@\csname sym#3\expandafter\endcsname
     \expandafter{\group@list}%
  \ifin@
    \begingroup
      \if\relax\noexpand#1% is command?
        \edef\reserved@a{\noexpand\in@{\string\mathchar}{\meaning#1}}%
        \reserved@a
        \ifin@
          \expandafter\Uset@mathsymbol
             \csname sym#3\endcsname{#1}{#2}{#4}%
          \@font@info{Redeclaring math symbol \string#1}%
        \else
            \expandafter\ifx
            \csname\expandafter\@gobble\string#1\endcsname
            \relax
            \expandafter\Uset@mathsymbol
               \csname sym#3\endcsname{#1}{#2}{#4}%
          \else
            \@latex@error{Command ‘\string#1’ already defined}\@eha
          \fi
\fi \else
        \expandafter\Uset@mathchar
          \csname sym#3\endcsname{#1}{#2}{#4}%
      \fi
    \endgroup
  \else
    \@latex@error{Symbol font ‘#3’ is not defined}\@eha
\fi
}




\def\uDeclareMathDelimiter#1{%
  \if\relax\noexpand#1%
    \expandafter\u@DeclareMathDelimiter
  \else
    \expandafter\u@xDeclareMathDelimiter
  \fi
  #1}

\def\u@DeclareMathDelimiter#1#2#3#4{%
  \expandafter\in@\csname sym#3\expandafter\endcsname
     \expandafter{\group@list}%
  \ifin@
      \begingroup
        \edef\reserved@a{\noexpand\in@{\string\delimiter}{\meaning#1}}%
        \reserved@a
        \ifin@
          \expandafter\Uset@mathdelimiter
             \csname sym#3\endcsname{#1}{#2}{#4}%
          \@font@info{Redeclaring math delimiter \string#1}%
        \else
            \expandafter\ifx
            \csname\expandafter\@gobble\string#1\endcsname
            \relax
            \expandafter\Uset@mathdelimiter
              \csname sym#3\endcsname{#1}{#2}{#4}%
          \else
            \@latex@error{Command `\string#1' already defined}\@eha
          \fi
        \fi
      \endgroup
  \else
    \@latex@error{Symbol font `#3' is not defined}\@eha
  \fi
}

\def\u@xDeclareMathDelimiter#1#2#3#4{%
  \expandafter\in@\csname sym#3\expandafter\endcsname
     \expandafter{\group@list}%
  \ifin@
      \begingroup
        \expandafter\Uset@@mathdelimiter
           \csname sym#3\endcsname{#1}{#4}%
      \endgroup
  \else
    \@latex@error{Symbol font `#3' is not defined}\@eha
  \fi
}



\def\uDeclareMathRadical#1#2#3{%
  \expandafter\ifx
       \csname\expandafter\@gobble\string#1\endcsname
       \relax
     \let#1\radical
  \fi
  \edef\reserved@a{\noexpand\in@{\string\radical}{\meaning#1}}%
  \reserved@a
  \ifin@
    \expandafter\in@\csname sym#2\expandafter\endcsname
       \expandafter{\group@list}%
    \ifin@
          \xdef#1{\Uradical \csname sym#2\endcsname\space#3\relax}%
    \else
      \@latex@error{Symbol font `#2' is not defined}\@eha
    \fi
  \else
    \@latex@error{Command `\string#1' already defined}\@eha
  \fi
}

\input{syms-2e-unicode}
\input{umath2e-syms.tex}

\endinput
%    \end{macrocode}
%
%    \begin{macrocode}
%</tex>
%    \end{macrocode}
%
% \subsection{Lua}
%
% \begingroup
%
%  \begingroup\lccode`~=`_
%  \lowercase{\endgroup\let~}_
%  \catcode`_=12
%
%    \begin{macrocode}
%<*callback>
%    \end{macrocode}
%
%    \begin{macrocode}
-- require('serialise')
require('math-map-gen.lua')
require('umath-alphabet-mappings.lua')

orig_define_font=luatexbase.remove_from_callback('define_font','luaotfload.define_font')

function x_define_font(name,size,id)
  local thisfont=orig_define_font(name,size,id)
  this_mapping = math_maps[mathmapstr]
  if (this_mapping and type(thisfont)=='table') then
--[[ # this is what's in the font:
      io.write('\n\n')
      for k,v in pairs(thisfont) do
        if type(v) == 'table' then
          local count = 0
          for _ in pairs(v) do count = count + 1 end
          io.write(k,' (( table, length ',count,'))\n')
        else
          print(k,' = "',v,'"',' (',type(v),')')
        end
      end io.write('\n\n')  ERROR()
--]]
    for k,v in pairs(this_mapping) do
	    thisfont.characters[k]=subst_glyph(thisfont,v)
	  end
  end
  return thisfont
end

function subst_glyph(font,slot)
  if not( font.characters[slot] ) then  return nil  end

  local char={}
  local entries = {"width","top_accent","italic","height","depth"}

  -- if slot > 0x10000 then  serialise(font.characters[slot]) ERROR()  end
  for i,v in pairs(entries) do
    char[v] = font.characters[slot][v]
  end
  char.commands   = {{'char',slot}}
  return char
end

luatexbase.add_to_callback('define_font',x_define_font,'my_define_font')
%    \end{macrocode}
%
%    \begin{macrocode}
%</callback>
%    \end{macrocode}
%
%
%    \begin{macrocode}
%<*mappings>
%    \end{macrocode}
%
%    \begin{macrocode}

--[[
Start off with a definition for unicode glyph slot names.
These need to be consistent because they're used programmatically.
Note that we could have defined this in a more "nested"-like structure,
but this would have made it less clear that we're talking about input
and output characters here, not abstractions.
--]]

dofile('umath-glyph-names.lua')

latin_upper = {'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'}
latin_lower = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'}

greek_upper = {'Alpha', 'Beta', 'Gamma', 'Delta', 'Epsilon', 'Zeta', 'Eta', 'Theta',
  'Iota', 'Kappa', 'Lambda', 'Mu', 'Nu', 'Xi', 'Omicron', 'Pi', 'Rho', 'Sigma', 'Tau',
  'Upsilon', 'Phi', 'Chi', 'Psi', 'Omega'}
greek_lower = {'alpha', 'beta', 'gamma', 'delta', 'epsilon', 'zeta', 'eta', 'theta',
  'iota', 'kappa', 'lambda', 'mu', 'nu', 'xi', 'omicron', 'pi', 'rho', 'sigma', 'tau',
  'upsilon', 'phi', 'chi', 'psi', 'omega'}

greek_sym = {'varTheta','nabla','partial','varsigma','vartheta','varphi','varpi','varkappa','varrho','varepsilon'}

num = {'zero','one','two','three','four','five','six','seven','eight','nine'}

--[[

# Define the mappings

Basically what we want here is to end up with a nested table structure that looks like

math_map = {
  ["italic"] = { ["mrmA"] = "mitA" , ["mrmB"] = "mrmB" , ... }
  ["bold"]   = { ["mrmA"] = "mbfA" , ["mrmB"] = "mbfB" , ... }
}

So to do this we define:

 * What the "name" of the math alphabet is ("italic", "bold", ...) (this is loop 1)
 * What the "prefix" of it is ("mit", "mbf")
 * What alphabets need to be included (this is loop 2)

Each alphabet is defined in terms of a series of slot names (this is loop 3).

This setup makes things nice and general, and we can define arbitrary alphabets as long as the
glyph naming scheme is consistent. If the glyph names are NOT consistent, we need to augment
the resulting structure manually. This is probably easier than making the construction code
any more convoluted!

--]]

mathalph = {}
mathalph.italic         = { ["prefix"] = "mit" ,       ["alphlist"] = {latin_upper,latin_lower,greek_upper,greek_lower,greek_sym} }
mathalph.bold           = { ["prefix"] = "mbf" ,       ["alphlist"] = {latin_upper,latin_lower,greek_upper,greek_lower,greek_sym,num} }
mathalph.bolditalic     = { ["prefix"] = "mbfit" ,     ["alphlist"] = {latin_upper,latin_lower,greek_upper,greek_lower,greek_sym} }
mathalph.scr            = { ["prefix"] = "mscr" ,      ["alphlist"] = {latin_upper,latin_lower} }
mathalph.boldscr        = { ["prefix"] = "mbfscr" ,    ["alphlist"] = {latin_upper,latin_lower} }
mathalph.frak           = { ["prefix"] = "mfrak" ,     ["alphlist"] = {latin_upper,latin_lower} }
mathalph.boldfrak       = { ["prefix"] = "mbffrak" ,   ["alphlist"] = {latin_upper,latin_lower} }
mathalph.bb             = { ["prefix"] = "Bbb" ,       ["alphlist"] = {latin_upper,latin_lower,num} }
mathalph.tt             = { ["prefix"] = "mtt" ,       ["alphlist"] = {latin_upper,latin_lower,num} }
mathalph.sans           = { ["prefix"] = "msans" ,     ["alphlist"] = {latin_upper,latin_lower,num} }
mathalph.sansitalic     = { ["prefix"] = "mitsans" ,   ["alphlist"] = {latin_upper,latin_lower} }
mathalph.boldsans       = { ["prefix"] = "mbfsans" ,   ["alphlist"] = {latin_upper,latin_lower,greek_upper,greek_lower,greek_sym,num} }
mathalph.boldsansitalic = { ["prefix"] = "mbfitsans" , ["alphlist"] = {latin_upper,latin_lower,greek_upper,greek_lower,greek_sym} }

math_map = {}
input_prefix = 'mrm'

for mathalph_name,thismathalph in pairs(mathalph) do
  math_map[mathalph_name] = {}
  for i,alphlist in pairs(thismathalph.alphlist) do
    for ii,slotname in pairs(alphlist) do
      math_map[mathalph_name][input_prefix..slotname] = thismathalph.prefix..slotname
    end
  end
end


--[[

# Write the tables to file in appropriate ways

Three files needed:

1. The Lua table mapping numeric glyph slots to glyph slots for each math alphabet.
   Basically a slimmed down `serialise`.

2. The XeTeX font mapping files.

3. For convenience, a shell script for compiling the XeTeX font mapping files so XeTeX can read them.

--]]

local f = assert(io.open("umath-alphabet-mappings.lua", "w"))
f:write("-- this file is automatically generated; do not edit","\n\n")
f:write("math_maps = {","\n")
for kk,vv in pairs(math_map) do
  f:write("  [\"",kk,"\"] = {","\n")
  for k,v in pairs(vv) do
    slot = math_sym_names[k] or k
    val  = math_sym_names[v] or v
    f:write("    [0x",slot,"] = 0x",val," ,","\n")
  end
  f:write("  },","\n")
end
f:write('}','\n')
f:close()

teckit_prefix = "mapping_math_"
for kk,vv in pairs(math_map) do
  tecmapname = teckit_prefix..kk
  local f = assert(io.open(tecmapname..".map", "w"))
  f:write("LHSName \"ascii\"","\n","RHSName \"","unicode-maths-",kk,"\"","\n","pass(Unicode)","\n\n")
  for k,v in pairs(vv) do
    slot = math_sym_names[k] or k
    val  = math_sym_names[v] or v
    f:write("U+",slot," <> U+",val," ;\n")
  end
  f:close()
  os.execute("teckit_compile " .. tecmapname .. "\n")
end
%    \end{macrocode}
%
%    \begin{macrocode}
%</mappings>
%    \end{macrocode}
%
% \engroup
%
% \Finale
